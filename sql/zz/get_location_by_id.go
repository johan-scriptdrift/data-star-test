
// Code generated by "sqlc-gen-zombiezen". DO NOT EDIT.

package zz

import (
    "fmt"
    "zombiezen.com/go/sqlite"

    
    "time"
    "github.com/delaneyj/toolbelt"
    
)


type GetLocationByIdRes struct {
        Id int64 `json:"id"`
        Lat float64 `json:"lat"`
        Long float64 `json:"long"`
        CreatedAt time.Time `json:"created_at"`
}




type GetLocationByIdStmt struct {
    stmt *sqlite.Stmt
}

func GetLocationById(tx *sqlite.Conn) *GetLocationByIdStmt {
    // Prepare the statement into connection cache
    stmt := tx.Prep(`
SELECT
    id, lat, long, created_at
FROM
    locations
WHERE id = ?1
    `)
    ps := &GetLocationByIdStmt{stmt: stmt}
    return ps
}

func (ps *GetLocationByIdStmt) Run(
            id  int64,
) (
            res *GetLocationByIdRes,
    err error,
) {
    defer ps.stmt.Reset()

    // Bind parameters
                    ps.stmt.BindInt64(1, id)

    // Execute the query
        if hasRow, err := ps.stmt.Step(); err != nil {
            return res, fmt.Errorf("failed to execute {{.Name.Lower}} SQL: %w", err)
        } else if hasRow {
                row := GetLocationByIdRes{}
            row.Id =         ps.stmt.ColumnInt64(0)
            row.Lat =         ps.stmt.ColumnFloat(1)
            row.Long =         ps.stmt.ColumnFloat(2)
            row.CreatedAt =         toolbelt.JulianDayToTime(ps.stmt.ColumnFloat(3))
            res = &row
        }

    return res, nil
}

func OnceGetLocationById(
    tx *sqlite.Conn,
            id  int64,
) (
            res *GetLocationByIdRes,
    err error,
) {
    ps := GetLocationById(tx)

    return ps.Run(
                    id,

    )
}


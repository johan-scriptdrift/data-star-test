
// Code generated by "sqlc-gen-zombiezen". DO NOT EDIT.

package zz

import (
    "fmt"
    "zombiezen.com/go/sqlite"

    
    "time"
    "github.com/delaneyj/toolbelt"
    
)


type GetUsersRes struct {
        Id int64 `json:"id"`
        FirstName string `json:"first_name"`
        LastName string `json:"last_name"`
        Email string `json:"email"`
        PasswordHash []byte `json:"password_hash"`
        CreatedAt time.Time `json:"created_at"`
}




type GetUsersStmt struct {
    stmt *sqlite.Stmt
}

func GetUsers(tx *sqlite.Conn) *GetUsersStmt {
    // Prepare the statement into connection cache
    stmt := tx.Prep(`
SELECT
    id, first_name, last_name, email, password_hash, created_at
FROM
    users
ORDER BY
    first_name
    `)
    ps := &GetUsersStmt{stmt: stmt}
    return ps
}

func (ps *GetUsersStmt) Run(
    ) (
            res []GetUsersRes,
    err error,
) {
    defer ps.stmt.Reset()


    // Execute the query
        for {
            if hasRow, err := ps.stmt.Step(); err != nil {
                return res, fmt.Errorf("failed to execute {{.Name.Lower}} SQL: %w", err)
            } else if !hasRow {
                break
            }

                row := GetUsersRes{}
            row.Id =         ps.stmt.ColumnInt64(0)
            row.FirstName =         ps.stmt.ColumnText(1)
            row.LastName =         ps.stmt.ColumnText(2)
            row.Email =         ps.stmt.ColumnText(3)
            row.PasswordHash =         toolbelt.StmtBytesByCol(ps.stmt, 4)
            row.CreatedAt =         toolbelt.JulianDayToTime(ps.stmt.ColumnFloat(5))
            res = append(res, row)
        }

    return res, nil
}

func OnceGetUsers(
    tx *sqlite.Conn,
    ) (
            res []GetUsersRes,
    err error,
) {
    ps := GetUsers(tx)

    return ps.Run(

    )
}

